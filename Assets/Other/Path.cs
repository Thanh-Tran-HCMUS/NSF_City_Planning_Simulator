using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

public enum BlockType {
    Blocked = 0,
    Priority = 1,
    Open = 2
};

public enum HidePath {
    Shown = 0,
    Internal = 1,
    Hiden = 2
};

/// QPathFinder modified
/// <summary>
/// Path is a connection between 2 Nodes.
/// </summary>
/// 
[System.Serializable]
public class Path {
    /// <summary>
    /// Stores first node of path
    /// </summary>
    [SerializeField] Node a;
    /// <summary>
    /// Stores second node of path
    /// </summary>
    [SerializeField] Node b;
    /// <summary>
    /// Stores cost of traveling this path
    /// </summary>
    [SerializeField] float cost;
    /// <summary>
    /// Keeps a list of the times the vehicle entered the track
    /// </summary>
    [SerializeField] List<float> queueTimes;
    /// <summary>
    /// Counts vehicles that leave this path
    /// </summary>
    public int leftQueue = 0;
    /// <summary>
    /// Counts vehicles that enter this path
    /// </summary>
    public int entireQueue = 0;
    /// <summary>
    /// Stores maximum number of vehicles that can stay on path in same time
    /// </summary>
    public int maxInQueue;
    /// <summary>
    /// Store ID
    /// </summary>
    public int autoGeneratedID;
    /// <summary>
    /// Marks type of path priority
    /// </summary>
    public BlockType priority;
    /// <summary>
    /// Marks path as open, open for prioritized, blocked
    /// </summary>
    public BlockType block = BlockType.Open;
    /// <summary>
    /// Marks type of hiden path
    /// </summary>
    [SerializeField] public HidePath hide;
    /// <summary>
    /// Store references to the street, if it belongs to any
    /// </summary>
    [SerializeField] public Street street;
    /// <summary>
    /// Stores references to a Transform component, if it has one
    /// </summary>
    [HideInInspector] public Transform transform;

    /// <summary>
    /// Returns the identifier of the first node
    /// </summary>
    public int IDOfA {
        get { return a == null ? -1 : a.ID; }
    }

    /// <summary>
    /// Zwraca identyfikator drugiego wierzchołka
    /// </summary>
    public int IDOfB {
        get { return b == null ? -1 : b.ID; }
    }

    /// <summary>
    /// Returns the identifier of the second node
    /// </summary>
    public Vector3 PosOfA {
        get { return a == null ? Vector3.zero : a.position; }
    }

    /// <summary>
    /// Returns the position of the second node
    /// </summary>
    public Vector3 PosOfB {
        get { return b == null ? Vector3.zero : b.position; }
    }

    /// <summary>
    /// Returns current amount of vehicles i queue
    /// </summary>
    public int CurrentQueue {
        get { return entireQueue - leftQueue; }
    }

    /// <summary>
    /// Returns current cost of travel this ptah
    /// </summary>
    public float Cost {
        get { return CurrentQueue + cost; }
        set { cost = value; }
    }

    /// <summary>
    /// Returns sum of times that vehicles wait in queue
    /// </summary>
    public float SumaryWaitingTime {
        get {
            float sum = 0;
            foreach (float f in queueTimes) {
                sum += Time.time - f;
            }
            return sum;
        }
    }
    /// <summary>
    /// Construktor
    /// </summary>
    /// <param name="A">First node</param>
    /// <param name="B">Second node</param>
    /// <param name="Parent">Paretn of object</param>
    /// <param name="Hide">Hide mark</param>
    /// <param name="Prioritet">Priority mark</param>
    public Path(Node A, Node B, Transform Parent, HidePath Hide = HidePath.Shown, BlockType Prioritet = BlockType.Open) {
        queueTimes = new List<float>();
        hide = Hide;
        street = Parent.GetComponent<Street>();
        priority = Prioritet;
        a = A; b = B;
        if (this.hide < HidePath.Hiden) {
            var go = GameObject.CreatePrimitive(PrimitiveType.Cube);
            go.GetComponent<BoxCollider>().size = new Vector3(1.4f, 1f, 1f);
            transform = go.transform;
            transform.parent = Parent;
            go.GetComponent<Renderer>().material = Resources.Load("street.mat", typeof(Material)) as Material;
           // go.GetComponent<Renderer>().material = (Material)AssetDatabase.LoadAssetAtPath("Assets/QPathSimulation/Materials/street.mat", typeof(Material));
        }
        Visualize();
    }
    /// <summary>
    /// The method is responsible for the visual representation of the object
    /// </summary>
    public void Visualize() {
        cost = hide == HidePath.Shown ? Vector3.Distance(PosOfA, PosOfB) : 0;
        maxInQueue = (int)Mathf.Floor(Vector3.Distance(PosOfA, PosOfB) - 0.5f);
        maxInQueue = maxInQueue < 1 ? 1 : maxInQueue;
        maxInQueue = hide != HidePath.Shown && maxInQueue > 2 ? 2 : maxInQueue;
        maxInQueue = 100;
        if (transform != null) {
            transform.position = (PosOfA + PosOfB) / 2f;
            transform.LookAt(PosOfB);
            transform.localScale = new Vector3(0.6f, 0.1f, Vector3.Distance(transform.position, PosOfB) * 2);
        }
    }
    /// <summary>
    /// Answers that vehicle can or can not enter to this path
    /// </summary>
    /// <param name="Priority">Priority of path of asking vehicle</param>
    /// <returns>Returns true if vehicle can enter</returns>
    public bool CanEnter(BlockType Priority) {
        if (block >= Priority && maxInQueue > entireQueue - leftQueue) {
            return true;
        }
        return false;
    }
    /// <summary>
    /// The method is responsible for adding vehicle to queue
    /// </summary>
    /// <returns>Returns number of vehicles in queue</returns>
    public int EnterQueue() {
        entireQueue++;
        queueTimes.Add(Time.time);
        return entireQueue - 1;
    }
    /// <summary>
    /// The method is responsible for delete vehicle to queue
    /// </summary>
    public void LeaveQueue() {
        queueTimes.RemoveAt(0);
        ++leftQueue;
    }
}